package com.aijoe.life

import android.Manifest
import android.content.Intent
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Bundle
import android.speech.RecognizerIntent
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.material3.Button
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.dp
import androidx.core.content.ContextCompat
import com.aijoe.life.ui.theme.AIJoeLifeTheme

class MainActivity : ComponentActivity() {
    // Launcher for speech recognizer result
    private val speechRecognizerLauncher = registerForActivityResult(
        ActivityResultContracts.StartActivityForResult()
    ) { result ->
        if (result.resultCode == RESULT_OK) {
            val spokenText = result.data
                ?.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS)
                ?.getOrNull(0)
            handleVoiceCommand(spokenText)
        }
    }

    // Separate launchers for audio and call permissions
    private val audioPermissionLauncher = registerForActivityResult(
        ActivityResultContracts.RequestPermission()
    ) { granted ->
        if (granted) startVoiceRecognition()
        else showToast("Audio permission denied.")
    }

    private val callPermissionLauncher = registerForActivityResult(
        ActivityResultContracts.RequestPermission()
    ) { granted ->
        if (granted) makeEmergencyCall()
        else showToast("Call permission denied.")
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            AIJoeLifeTheme {
                MainScreen(
                    onVoiceCommand = { startVoiceRecognition() },
                    onEmergencyCall = { makeEmergencyCall() }
                )
            }
        }
    }

    private fun startVoiceRecognition() {
        if (ContextCompat.checkSelfPermission(
                this, Manifest.permission.RECORD_AUDIO
            ) == PackageManager.PERMISSION_GRANTED
        ) {
            val intent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH).apply {
                putExtra(
                    RecognizerIntent.EXTRA_LANGUAGE_MODEL,
                    RecognizerIntent.LANGUAGE_MODEL_FREE_FORM
                )
                putExtra(RecognizerIntent.EXTRA_PROMPT, "Speak to AIJoe...")
            }
            speechRecognizerLauncher.launch(intent)
        } else {
            audioPermissionLauncher.launch(Manifest.permission.RECORD_AUDIO)
        }
    }

    private fun handleVoiceCommand(command: String?) {
        when (command?.lowercase()) {
            "bible verse"   -> showToast("Fetching daily Bible verse...")
            "weather"       -> showToast("Checking weather...")
            "joke"          -> showToast("Why did Joey bark? To be your AI hero!")
            "find place"    -> showToast("Finding nearby places...")
            "fix something" -> showToast("What needs fixing?")
            else             -> showToast("Command not recognized: $command")
        }
    }

    private fun makeEmergencyCall() {
        if (ContextCompat.checkSelfPermission(
                this, Manifest.permission.CALL_PHONE
            ) == PackageManager.PERMISSION_GRANTED
        ) {
            val intent = Intent(Intent.ACTION_CALL, Uri.parse("tel:911"))
            startActivity(intent)
        } else {
            callPermissionLauncher.launch(Manifest.permission.CALL_PHONE)
        }
    }

    private fun showToast(message: String) {
        Toast.makeText(this, message, Toast.LENGTH_SHORT).show()
    }
}

@Composable
fun MainScreen(
    onVoiceCommand: () -> Unit,
    onEmergencyCall: () -> Unit
) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Image(
            painter = painterResource(id = R.drawable.joey_avatar),
            contentDescription = "Joey Avatar",
            modifier = Modifier.size(100.dp)
        )
        Text(
            text = "Welcome to AIJoe.Life!",
            style = MaterialTheme.typography.headlineMedium
        )
        Spacer(modifier = Modifier.height(16.dp))

        Button(onClick = onVoiceCommand) {
            Text("Talk to AIJoe")
        }
        Spacer(modifier = Modifier.height(8.dp))

        val features = listOf(
            "Daily Bible Verse" to { /* TODO: Fetch daily verse */ },
            "GPS" to { /* TODO: GPS */ },
            "Instant Help (911)" to onEmergencyCall,
            "Music" to { /* TODO: Music */ },
            "Weather" to { /* TODO: Weather */ },
            "Mood" to { /* TODO: Mood tracking */ },
            "List" to { /* TODO: List management */ },
            "Ask AI" to { /* TODO: Ask AI */ },
            "Joke" to { /* TODO: Tell joke */ },
            "Help Me Fix Something" to { /* TODO: Fix something */ },
            "Find Nearby Place" to { /* TODO: Find place */ }
        )

        features.forEach { (label, action) ->
            Button(onClick = action) {
                Text(label)
            }
            Spacer(modifier = Modifier.height(8.dp))
        }
    }
}
